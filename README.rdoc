== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.



## HACKER NEWS CLONE 
Hacker News is a site where nerds post links to articles, vote on which ones they like best, and discuss the articles with comments. Let's make a simplified version of Hacker News.

Once again, don't worry about users logging in yet - we'll get to that very soon!

Here are your stories:

As a user, I want to post a link, so that I can share it with other nerds.
As a user, I want to vote up other people's links, so that I can promote links that I like.
As a user, I want the links with the most votes to be listed first, so that I can know what's most popular.
As a user, I want the link ranking to be a function of both the number of votes and the time since the post, so that popular links don't stay on the homepage forever. Hint: come up with a way to score links where they get a certain number of points for how new they are, and a certain number for how many votes they have. Don't spend too much time fussing with the algorithm - just make up something simple.
As a user, I want to comment on a link, so that I can have a discussion about the article that was submitted.
As a user, I want to comment on a comment, so that I can have a discussion about the comment. This is hard!!! Don't feel like you have to complete this problem. It took me several hours the first time I did it. Here are a couple hints. Use polymorphism so that a comment can belong to a post or to another comment. Your associations will look something like this:
class Comment < ActiveRecord::Base
  belongs_to :commentable, :polymorphic => true
  has_many :comments, :as => :commentable
end

class Link < ActiveRecord::Base
  has_many :comments, :as => :commentable
end
To display comments on comments, make each comment a partial. For each comment, loop through the comments on the comment, recursively rendering partial within itself.


##Conventional Rails assessment

Build a Rails app with at least two models, including authentication.

* Does your code continue to meet all of the standards from last week?

* Do the routes use resources properly?

* Are unused routes removed?

* Is implicit rendering used properly in controllers?

* Are route helpers used for all URLs?

* Are all forms built with form helpers?

* Is the app protected from CSRF?

* Is the app protected from mass-assignment?

* Is there thorough integration test coverage?

* Is authentication implemented properly?